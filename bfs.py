


class BFS:
    def __init__(self,q):
        self.q=q
    def bfss(self,visited,graph,node):
        
        try:
            visited.append(node)
            q.append(node)
            print(q)
            while q:
                m =q.pop(0)
            
                print(m,end=" ")
                for neighbor in graph[m]:
                    if neighbor not in visited:
                        visited.append(neighbor)
                        q.append(neighbor)
        except Exception as e:
            print(e)
                    
                    
graph={
    'P':['Q','R','S'],
    'Q':['R','P'],
    'R':['P','Q','T'],
    'S':['P'],
    'T':['R']
}
visited=[]
q=[]
b=BFS(q)
b.bfss(visited,graph,'P')

